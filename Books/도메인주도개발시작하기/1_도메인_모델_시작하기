## 도메인이란?

개발자 입장에서 온라인 서점은 구현해야 할 소프트웨어의 대상이 된다. 온라인 서점 소프트웨어는 온라인으로 책을 판매하는데 필요한
상품 조회, 구매, 결제, 배송 추적 등의 기능을 제공해야 한다. 이때 온라인 서점은 소프트웨어로 해결하고자 하는 문제 영역, 즉 도메인에 해당한다.

한 도메인은 다시 하위 도메인으로 나눌 수 있다. 카탈로그 하위 도메인은 고객에게 구매할 수 있는 상품 목록을 제공하고, 주문 하위 도메인은 고객의 주문을 처리한다. 혜택 하위 도메인은 쿠폰이나 특별 할인과 같은 서비스를 제공하고,
배송 하위 도메인은 고객에게 구매한 상품을 전달하는 과정을 처리한다. 한 하위 도메인은 다른 하위 도메인과 연동하여 완전한 기능을 제공한다. 

특정 도메인을 위한 소프트웨어라고 해서, 도메인이 제공해야할 모든 기능을 직접 구현하는 것은 아니다. 많은 온라인 쇼핑몰이 자체 배송 시스템을 구축하기 보다는 외부 배송 업체의 시스템을 사용하고 배송 추적 정보를
제공하는데 필요한 기능만 일부 연동한다.

도메인마다 고정된 하위 도메인이 존재하는 것은 아니다. 모든 온라인 쇼핑몰이 고객 혜택을 제공하는 것은 아니며 규모가 크지 않은 소규모 업체는 엑셀과 같은 도구를 이용해 수작업으로 정산을 처리할 수도 있다. 하위 도메인을 어떻게 구성할지 여부는 상황에 따라 달라진다.

## 도메인 전문가와 개발자 간 지식 공유

온라인 홍보, 정산 배송 등 각 영역에는 전문가가 있다. 이들 전문가는 해당 도메인에 대한 지식과 경험을 바탕으로 본인들이 원하는 기능 개발을 요구한다. 예를 들어 회계 담당자는 엑셀로 맞추던 정산 금액 계산을 자동화해주는 기능을 
요구할 수 있다. AS 기사는 고객에게 보내는 문자 메시지를 빠르게 입력할 수 있는 템플릿 추천 기능을 요구할 수 있다.

개발자는 이런 요구 사항을 분석하고 설계하여 코드를 작성하며 테스트하고 배포한다. 이 과정에서 요구사항은 첫 단추와 같다. 첫 단추를 잘못 끼우면 엉뚱한 기능을 만들게 된다. 그래서 <u><b>코딩에 앞서 요구사항을 올바르게 이해하는 것이 중요하다.</b></u> 요구사항을 올바르게 이해하기 위해서는 개발자와 전문가가
직접 대화하는 것이다. 개발자와 전문가 사이에 내용을 전파하는 전달자가 많으면 많을수록 정보가 왜곡되고 손실이 발생하게 되며, 개발자는 최초에 전문가가 요구하는 것과는 다른 무언가를 만들게 된다.

도메인 전문가 만큼은 아니겠지만, 이해관계자와 개발자도 도메인 지식을 갖춰야 한다. 제품 개발과 관련된 도메인 저문가, 관계자, 개발자가 같은 지식을 공유하고 직접 소통할수록 도메인 전문가가 원하는 제품을 만들 가능성이 높아진다.

## 도메인 모델

도메인 모델에는 다양한 정의가 존재하는데, 기본적으로 도메인 모델은 특정 도메인을 개념적으로 표현한 것이다. 예를 들어 주문 도메인을 생각해보자. 온라인 쇼핑몰에서 주문을 하려면 상품을 몇개 살지 선택하고 배송지를 입력한다. 선택한 상품 가격을 이용해서 총 지불 금액을 계산하고, 금액 지불을 위한 결제 수단을 선택한다.
주문한 뒤에도 배송 전이면 배송지를 변경하거나 주문을 취소할 수 있다. 도메인 모델은 도메인의 모든 내용을 담고 있지는 않지만 이 모델을 보면 주문(Order)은 주문번호(orderNumber)와 지불할 총 금액(totalAmounts)이 있고, 배송정보(ShippingInfo)를 변경(changeShipping) 할 수 있음을 알 수 있다. 또한 주문을 취소(cancel)할 수 있다는 것도 알 수 있다.
도메인 모델을 사용하면 여러 관계자들이 동일한 모습을 도메인을 이해하고 지식을 공유하는데 도움이 된다.

도메인 모델은 객체 또는 상태 다이어그램을 이용해서 모델링할 수 있다. 도메인 모델을 표현할 때 클래스 다이어그램이나 상태 다이어그램과 같은 UML 표기법만 사용해야하는 것은 아니다. 관계가 중요한 도메인이라면 그래프를 이용해서 도메인을 모델링할 수 있다. 도메인을 이해하는데 도움이 된다면 표현 방식이 무엇인지는 중요하지 않다.

<u>도메인 모델은 기본적으로 도메인 자체를 이해하기 위한 개념 모델이다.</u> 개념 모델을 이용해서 바로 코드를 작성할 수 있는 것은 아니기에 구현 기술에 맞는 구현 모델이 따로 필요하다. 개념 모델과 구현 모델을 서로 다른 것이지만 구현 모델이 개념 모델을 최대한 따르도록 할 수는 있다. 예를 들어
객체 기반 모델을 기반으로 도메인을 표현했다면 객체 지향 연어를 이용해 개념 모델에 가깝게 구현할 수 있다. 
